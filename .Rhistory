geom_histogram(bins=50) +
facet_grid(Soln ~ Parameters) + theme_bw()
# Create smaller dataset
set.seed(789)
sampleindex = sample(seq_len(nrow(case1)),size = 0.0025*nrow(case1))
case1small = case1 %>% group_by(soln) %>% sample_n(5) # Select 5 of each
# Parallel coordinate plot
my_colors=colors()[as.numeric(as.factor(case1small$soln))*27]
parcoord(case1small[,c(1,2,3,4)], col=my_colors)
legend("topleft", inset=0, unique(case1small$soln), col=unique(my_colors),cex=0.8, fill=unique(my_colors))
# Animated scatter plot
set.seed(567)
case1 %>%
filter(flex_cost==1.45) %>%
ggplot() +
aes(x = as.factor(soln), y= cap_flex, size=cap_in, color=dem) +
geom_point(pch=20) +
theme_bw()
case1 %>%
filter(flex_cost==1.45) %>%
ggplot() +
aes(x = as.factor(soln), y= cap_flex, size=cap_in, color=dem) +
geom_point(pch=20) +
theme_bw()
case1 %>%
filter(flex_cost==1.45)
case1 %>%
filter(flex_cost==1.4)
View(case1)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyberse)
library(tidyverse)
case1 %>%
group_by(flex_cost)
case1 %>%
group_by(flex_cost) %>%
ggplot() +
aes(x=flex_cost) +
geom_bar(stat='count')
case1 %>%
group_by(flex_cost) %>%
ggplot() +
aes(x=flex_cost, fil=as.factor(soln)) +
geom_bar(stat='count', )
case1 %>%
group_by(flex_cost) %>%
ggplot() +
aes(x=flex_cost, fill=as.factor(soln)) +
geom_bar(stat='count')
set.seed(123)
df1 = data.frame(replicate(3,runif(1000)*100))
costs = as.vector(replicate(1000, seq(0.5,1.5,0.05)))
df1 = cbind(df1[rep(seq_len(nrow(df1)), each=21),],
costs)
df1 %>% head()
colnames(df1) = c("cap_in", "cap_flex", "dem","flex_cost")
df1 = df1 %>% mutate(q_refill = dem - cap_in)
df1 %>% head()
case1 = df1 %>% mutate(x_opt = ifelse(dem < cap_in, 0,
ifelse(cap_flex < dem - cap_in, 1,
ifelse(flex_cost >=1, 1, 0))),
y_opt = ifelse(dem < cap_in, 0,
ifelse(cap_flex < dem - cap_in, 0,
ifelse(flex_cost < 1, 1, 0))),
optvalue = 1 * x_opt + flex_cost * y_opt)
case1 = case1 %>% mutate(soln = paste("(",case1$x_opt, ",", case1$y_opt, ")",sep=''))
case1 %>% head()
case1 %>%
gather(Parameters, Value, cap_in, cap_flex, dem) %>%
mutate(Soln = ifelse(x_opt==0 & y_opt==0, "None",
ifelse(x_opt==1 & y_opt==0, "Refill",
ifelse(x_opt==0 & y_opt==1, "Flexible", "Both")))) %>%
ggplot() + aes(x=Value) +
geom_histogram(bins=50) +
facet_grid(Soln ~ Parameters) + theme_bw()
# Create smaller dataset
set.seed(789)
sampleindex = sample(seq_len(nrow(case1)),size = 0.0025*nrow(case1))
case1small = case1 %>% group_by(soln) %>% sample_n(5) # Select 5 of each
# Parallel coordinate plot
my_colors=colors()[as.numeric(as.factor(case1small$soln))*27]
parcoord(case1small[,c(1,2,3,4)], col=my_colors)
legend("topleft", inset=0, unique(case1small$soln), col=unique(my_colors),cex=0.8, fill=unique(my_colors))
# Parallel coordinate plot
library(ggplot)
?parcoord
library(MASS)
set.seed(123)
df1 = data.frame(replicate(3,runif(1000)*100))
costs = as.vector(replicate(1000, seq(0.5,1.5,0.05)))
df1 = cbind(df1[rep(seq_len(nrow(df1)), each=21),],
costs)
df1 %>% head()
colnames(df1) = c("cap_in", "cap_flex", "dem","flex_cost")
df1 = df1 %>% mutate(q_refill = dem - cap_in)
df1 %>% head()
case1 = df1 %>% mutate(x_opt = ifelse(dem < cap_in, 0,
ifelse(cap_flex < dem - cap_in, 1,
ifelse(flex_cost >=1, 1, 0))),
y_opt = ifelse(dem < cap_in, 0,
ifelse(cap_flex < dem - cap_in, 0,
ifelse(flex_cost < 1, 1, 0))),
optvalue = 1 * x_opt + flex_cost * y_opt)
case1 = case1 %>% mutate(soln = paste("(",case1$x_opt, ",", case1$y_opt, ")",sep=''))
case1 %>% head()
case1 %>%
gather(Parameters, Value, cap_in, cap_flex, dem) %>%
mutate(Soln = ifelse(x_opt==0 & y_opt==0, "None",
ifelse(x_opt==1 & y_opt==0, "Refill",
ifelse(x_opt==0 & y_opt==1, "Flexible", "Both")))) %>%
ggplot() + aes(x=Value) +
geom_histogram(bins=50) +
facet_grid(Soln ~ Parameters) + theme_bw()
# Create smaller dataset
set.seed(789)
sampleindex = sample(seq_len(nrow(case1)),size = 0.0025*nrow(case1))
case1small = case1 %>% group_by(soln) %>% sample_n(5) # Select 5 of each
# Parallel coordinate plot
library(ggplot)
my_colors=colors()[as.numeric(as.factor(case1small$soln))*27]
parcoord(case1small[,c(1,2,3,4)], col=my_colors)
legend("topleft", inset=0, unique(case1small$soln), col=unique(my_colors),cex=0.8, fill=unique(my_colors))
# Animated scatter plot
# Animated scatter plot
set.seed(567)
case1 %>%
group_by(flex_cost) %>%
ggplot() +
aes(x=flex_cost, fill=as.factor(soln)) +
geom_bar(stat='count')
set.seed(123)
#=====Select Top SKUs (KL: FOR UNIT SALES) =====#
# Load national sales data
nation.metric.data = read.csv(file="Input/NationalUnitsSoldSkuStoreTVMatrix.csv", quote="", header=TRUE, sep=",")
# List of SKUs
nation.level.SKUs = nation.metric.data[,1]
# Unit sales by week (rows) and SKU (columns)
nation.level.metric = t(nation.metric.data[,-c(1)])
# Total sales by SKU (over all weeks)
nation.level.SKU.metric = colSums(nation.level.metric)
#=====Select Competing SKUs=====#
#===Select a quantile===#
# Get cutoff for metric (e.g., total sales by SKU) quantile
top.quantile = 0.95
metric.quantile = top.quantile * sum(nation.level.SKU.metric)
# Loop over SKUs and find quantile's metric threshold
for(pointer in 1:length(nation.level.SKUs))
{
if(sum(sort(nation.level.SKU.metric, decreasing = TRUE)[1:pointer]) >= metric.quantile)
{
break()
}
threshold = sort(nation.level.SKU.metric, decreasing = TRUE)[pointer]
}
# Select SKUs with metric (e.g., total sales) above threshold
nation.level.SKUs.selected = nation.level.SKUs[nation.level.SKU.metric > threshold]
nation.level.SKUs.selected.metric = nation.level.SKU.metric[nation.level.SKU.metric > threshold]
nation.level.competing95.SKUs = nation.level.SKUs.selected
#===Select a quantile===#
# Same as above for another quantile
top.quantile = 0.9
metric.quantile = top.quantile * sum(nation.level.SKU.metric)
for(pointer in 1:length(nation.level.SKUs))
{
if(sum(sort(nation.level.SKU.metric, decreasing = TRUE)[1:pointer]) >= metric.quantile)
{
break()
}
threshold = sort(nation.level.SKU.metric, decreasing = TRUE)[pointer]
}
nation.level.SKUs.selected = nation.level.SKUs[nation.level.SKU.metric > threshold]
nation.level.SKUs.selected.metric = nation.level.SKU.metric[nation.level.SKU.metric > threshold]
nation.level.competing90.SKUs = nation.level.SKUs.selected
#===Select a quantile===#
# Same as above for another quantile
top.quantile = 0.8
metric.quantile = top.quantile * sum(nation.level.SKU.metric)
for(pointer in 1:length(nation.level.SKUs))
{
if(sum(sort(nation.level.SKU.metric, decreasing = TRUE)[1:pointer]) >= metric.quantile)
{
break()
}
threshold = sort(nation.level.SKU.metric, decreasing = TRUE)[pointer]
}
nation.level.SKUs.selected = nation.level.SKUs[nation.level.SKU.metric > threshold]
nation.level.SKUs.selected.metric = nation.level.SKU.metric[nation.level.SKU.metric > threshold]
nation.level.competing80.SKUs = nation.level.SKUs.selected
#===Select a quantile===#
# Same as above for another quantile
top.quantile = 0.5
metric.quantile = top.quantile * sum(nation.level.SKU.metric)
for(pointer in 1:length(nation.level.SKUs))
{
if(sum(sort(nation.level.SKU.metric, decreasing = TRUE)[1:pointer]) >= metric.quantile)
{
break()
}
threshold = sort(nation.level.SKU.metric, decreasing = TRUE)[pointer]
}
nation.level.SKUs.selected = nation.level.SKUs[nation.level.SKU.metric > threshold]
nation.level.SKUs.selected.metric = nation.level.SKU.metric[nation.level.SKU.metric > threshold]
nation.level.competing50.SKUs = nation.level.SKUs.selected
#=====Now select SKUs in scope=====#
#===Select a quantile===#
# Get SKU and metric data for selected quantile
top.quantile = 0.95
metric.quantile = top.quantile * sum(nation.level.SKU.metric)
for(pointer in 1:length(nation.level.SKUs))
{
if(sum(sort(nation.level.SKU.metric, decreasing = TRUE)[1:pointer]) >= metric.quantile)
{
break()
}
threshold = sort(nation.level.SKU.metric, decreasing = TRUE)[pointer]
}
nation.level.SKUs.selected = nation.level.SKUs[nation.level.SKU.metric > threshold]
nation.level.SKUs.selected.metric = nation.level.SKU.metric[nation.level.SKU.metric > threshold]
clean.rule = 80 # Excludes final 80 weeks --> 2014.01 to 2017.14 remain
# Loop (backwards) through selected SKUs
for(pointer in length(nation.level.SKUs.selected):1)
{
# For current SKU, if no sales data for ALL weeks up to the last "clean rule" weeks
if(sum(!tail(nation.level.metric[,nation.level.SKUs == nation.level.SKUs.selected[pointer]], clean.rule) == rep(0, clean.rule)) == 0)
{
# Remove this SKU from selected
nation.level.SKUs.selected = nation.level.SKUs.selected[-pointer]
}
}
clean.rule = 184 # Excludes final 184 weeks --> 2014.01 to 2015.15 remain
for(pointer in length(nation.level.SKUs.selected):1)
{
if(sum(!head(nation.level.metric[,nation.level.SKUs == nation.level.SKUs.selected[pointer]], clean.rule) == rep(0, clean.rule)) == 0)
{
nation.level.SKUs.selected = nation.level.SKUs.selected[-pointer]
}
}
#==============================Basic Functions==============================#
ma <- function(arr, win = 3)
{
res = arr
begin = (win+1)/2
end = length(arr) - begin + 1
for(i in begin:end)
{
res[i] = mean(arr[(i-begin+1):(i+begin-1)])
}
return (res)
}
make_vec <- function(min, max, discretize)
{
vec = c(min)
for(i in 1:discretize)
{
vec = c(vec, min + i/discretize*(max-min))
}
return (vec)
}
rowMedian <- function(x, na.rm = TRUE)
{
return(apply(x, 1, median, na.rm = na.rm))
}
legitimate <- function(horizon, days)
{
max = max(horizon)
temp = horizon - days
temp[temp < 1] = 1
temp[temp > max] = max
return(temp)
}
my_log <- function(x)
{
temp = c()
for(i in x)
{
if(!is.na(i))
{
if(i > 1) {temp = c(temp, log(i))}
if(i >= -1 && i <= 1) {temp = c(temp, 0)}
if(i < -1) {temp = c(temp, -log(-i))}
}
else
{
temp = c(temp, NA)
}
}
return(temp)
}
#==========Nation Level==========#
#=====Read Data=====#
#Note: All data has SKU as rows and weeks as columns
# Load price data
base.price.data = read.csv(file="Input/NationalGlobalSalesWeightedBasePriceSkuStoreTVMatrix.csv", quote = "", header=TRUE, sep=",")
# Load discounted priced data (KL: i.e., promotion price?)
discounted.price.data = read.csv(file="Input/NationalGlobalSalesWeightedDiscountedPriceSkuStoreTVMatrix.csv", quote = "", header=TRUE, sep=",")
# Load units sales data
units.data = read.csv(file="Input/NationalUnitSalesSkuStoreTVMatrix.csv", quote = "", header=TRUE, sep=",")
# Get number of weeks
num.description = 1
weeks = ncol(discounted.price.data) - num.description
# Get list of SKUs
nation.level.SKUs = unique(discounted.price.data[,1])
#=====Sculpting=====#
# Check that SKU names (and any other description columns) are identical in datasets
base.price.title = base.price.data[, c(1:num.description)]
discounted.price.title = discounted.price.data[, c(1:num.description)]
units.title = units.data[, c(1:num.description)]
if(sum(base.price.title != units.title) > 0)
{
print("Warning: title not aligned!")
}
# Get price data
base.price = base.price.data[, -c(1:num.description)]
discounted.price = discounted.price.data[, -c(1:num.description)]
# Get unit sales data
units = units.data[, -c(1:num.description)]
# units = units.data[, -c(1:num.description, ncol(units.data))]
# Get SKU names
title = t(base.price.title)
# Transpose datasets (effectively)
base.price = do.call(rbind, base.price)
discounted.price = do.call(rbind, discounted.price)
units = do.call(rbind, units)
# Create data matrices
base.price.n = matrix(as.numeric(base.price[,]), nrow=nrow(base.price[,]))
discounted.price.n = matrix(as.numeric(discounted.price[,]), nrow=nrow(discounted.price[,]))
units.n = matrix(as.numeric(units[,]), nrow=nrow(units[,]))
# KL: Profit or revenue? Depends what discounted price means...
value.n = discounted.price.n * units.n
# Number of SKU
# KL: How still remember nationa.level.SKU.selected data? Don't need to load other .R file?
#weeks = nrow(base.price.n)
scope.number = length(nation.level.SKUs.selected)
# START HERE
nation.level.base.price = base.price.n[ , title[1,] %in% nation.level.SKUs.selected ]
nation.level.price = discounted.price.n[ , title[1,] %in% nation.level.SKUs.selected ]
nation.level.units = units.n[ , title[1,] %in% nation.level.SKUs.selected ]
nation.level.price = round(nation.level.price, digits = -1)
nation.level.base.price = round(nation.level.base.price, digits = -1)
for(SKU.pointer in 1:ncol(nation.level.units))
{
plot(1:weeks, nation.level.units[,SKU.pointer], type = 'l', xlab = SKU.pointer)
par(new=TRUE)
plot(1:weeks, nation.level.price[,SKU.pointer], col = 2, type = 'l', axes = FALSE, xlab = '')
axis(4, col="red",col.axis="red",las=1)
nation.level.units[is.na(nation.level.units)] = 0
}
#---------- Setup ----------#
library(tidyverse)
library(readxl)
library(RColorBrewer)
theme_set(theme_bw())
theme_set(theme_bw(base_size = 22))
setwd("~/Documents/flexible-routing")
num_sims <- 6000
#---------- Dataset Preparation ----------#
# Get simulation output files
files <- list.files('output', pattern = '.xlsx')
# Import and combine datasets with individual runs
sims <- data.frame()
for (i  in 1:length(files)){
df <- read_xlsx(paste('output/', files[i], sep = ''), sheet = 1)
sims <- rbind(sims, df)
}
colnames(sims) = c('ID','Scenario','Customers','Strategy','Metric','Value')
# Rename scenarios
sims[(sims$Scenario == 'baseline'),]$Scenario = 'Baseline'
sims[(sims$Scenario == 'baseline_k3'),]$Scenario = 'Medium Overlap'
sims[(sims$Scenario == 'baseline_k1'),]$Scenario = 'Small Overlap'
sims[(sims$Scenario == 'short_route'),]$Scenario = 'Short Route'
sims[(sims$Scenario == 'long_route'),]$Scenario = 'Long Route'
sims[(sims$Scenario == 'stochastic_customers'),]$Scenario = 'Stoch. Cust.'
sims[(sims$Scenario == 'low_capacity'),]$Scenario = 'Low Capacity'
sims[(sims$Scenario == 'high_capacity'),]$Scenario = 'High Capacity'
# Drop full flexibility strategy
sims <- sims[!(sims$Strategy == 'fully flexible'),]
# Rename routing strategies
sims[(sims$Strategy == 'dedicated'),]$Strategy = 'Dedicated'
sims[(sims$Strategy == 'overlapped'),]$Strategy = 'Overlapped'
sims[(sims$Strategy == 'reoptimization'),]$Strategy = 'Reoptimization'
# Rename metrics
sims[(sims$Metric == 'total cost'),]$Metric = 'Total Cost'
sims[(sims$Metric == 'circular cost'),]$Metric = 'Circular Cost'
sims[(sims$Metric == 'radial cost'),]$Metric = 'Radial Cost'
sims[(sims$Metric == 'trip count'),]$Metric = 'Trip Count'
# Update ID to represent individual simulations
n_strat <- length(unique(sims$Strategy))
n_metric <- length(unique(sims$Metric))
sims <- sims %>%
group_by(Scenario, Customers) %>%
mutate(ID = rep(c(1:num_sims), each = n_strat*n_metric)) %>%
ungroup()
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = Value), position = position_dodge(width = 0.9), vjust = -0.25) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = round(Value)), position = position_dodge(width = 0.9), vjust = -0.25) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = round(Value, digits = 1)), position = position_dodge(width = 0.9), vjust = -0.25) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = round(Value, digits = 1)),
position = position_dodge(width = 0.9),
vjust = -0.25,
size = 10) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = round(Value, digits = 1)),
position = position_dodge(width = 0.9),
vjust = -0.25,
size = 3) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = round(Value, digits = 1)),
position = position_dodge(width = 0.9),
vjust = -0.25,
size = 4) +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
# Number of trips
sims %>%
filter(Scenario == 'Baseline',
Metric == 'Trip Count') %>%
mutate(Customers = factor(Customers)) %>%
group_by(Customers, Strategy) %>%
summarise(Value = mean(Value)) %>%
ggplot() +
aes(x = Customers, y = Value, fill = Strategy) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Number of Customers', y = 'Trip Count') +
scale_fill_brewer(palette = "Dark2") +
theme(aspect.ratio = 0.75)
